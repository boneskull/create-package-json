#!/usr/bin/env node
'use strict'
// vim: set ft=javascript:ts=2:sw=2
const program = require('commander')
const pkg = require('../package.json')
const createPackageJson = require('../')
const arrayFromList = require('../lib/array-from-list')

let directory

program
  .version(pkg.version)
  .arguments('<directory>')
  .action((dir) => directory = dir)
  .option('--ignore-existing', 'Ignore existing package.json')
  .option('--existing-package [path]', 'Provide a path to an existing package.json to start with')
  .option('--update-deps', 'Update deps which to their latest versions')
  .option('--no-prompt', 'Skip prompts and just use input options')
  .option('--extended', 'Show extended option prompts (ex. browser, engines, etc)')
  .option('--spacer [json spacer]', 'Format character for package json', 2)
  .option('--name [name]', 'The package name')
  .option('--scope [scope]', 'The package scope')
  .option('--ver [version]', 'The package version')
  .option('--description [description]', 'The package description')
  .option('--author [author]', 'The package author')
  .option('--repository [repository]', 'The package repository')
  .option('--keywords [keywords]', 'The package keywords')
  .option('--license [license]', 'The package license')
  .option('--main [main]', 'The package main entry point')
  .option('--private', 'This is a private package')
  .option('--dependencies [dependencies]', 'Package dependencies')
  .option('--dev-dependencies [dependencies]', 'Package dev dependencies')
  // .option('--peer-dependencies [dependencies]', 'Package peer dependencies')
  .option('--scripts [scripts]', 'Package scripts')
  .parse(process.argv)

// Process scripts as json
if (program.scripts) {
  program.scripts = JSON.parse(program.scripts)
}
if (program.dependencies) {
  program.dependencies = arrayFromList(program.dependencies)
}
if (program.devDependencies) {
  program.devDependencies = arrayFromList(program.devDependencies)
}
// if (program.peerDependencies) {
//   program.peerDependencies = arrayFromList(program.peerDependencies)
// }

// Run the process
createPackageJson({
  directory: directory,
  ignoreExisting: program.ignoreExisting,
  existingPackage: program.existingPackage,
  noPrompt: program.noPrompt,
  extended: program.extended,
  spacer: program.spacer,
  // check if string because there is a .name getter function, same with description
  name: typeof program.name === 'string' ? program.name : undefined,
  scope: program.scope,
  version: program.ver,
  description: typeof program.description === 'string' ? program.description : undefined,
  author: program.author,
  repository: program.repository,
  keywords: program.keywords,
  license: program.license,
  main: program.main,
  private: program.private,
  scripts: program.scripts,
  dependencies: program.dependencies,
  devDependencies: program.devDependencies,
  updateDeps: program.updateDeps
  // peerDependencies: program.peerDependencies
})
